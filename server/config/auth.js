const bcrypt = require('bcrypt');
const passport = require('passport')
const { db } = require('../routes');
const { promisify } = require('util');



/* 
const getAsync = promisify(db.get).bind(db);

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    let user = null;
    await getAsync('usersMockDatabase').then((users) => {
      user = JSON.parse(users).find(currUser => currUser.id === id);
    });
    if (user) {
      done(null, user);
    } else {
      done(null, false);
    }
  } catch (err) {
    done(err);
  }
}); */

/* passport.use(
  new LocalStrategy(
    {
      usernameField: 'email',
      passwordField: 'password',
    },
    // possible to use .then?
    async (email, password, done) => {
      let user = null;
      await getAsync('usersMockDatabase').then((users) => {
        const currUsers = JSON.parse(users);

        // if redis session expired, create database with one user
        if (!currUsers || currUsers.length < 1) {
          db.set('usersMockDatabase', [
            {
              id: 1,
              email: 'chouomam@chouman.com',
              // "test" -- generated by bcrypt calculator
              password: '$2a$04$4yQfCo8kMpH24T2iQkw9p.hPjcz10m.FcWmgkOhkXNPSpbwHZ877S',
              userName: 'Chouomam',
            },
          ]);
        }

        user = currUsers.find(currUser => currUser.email === email);
      });
      if (!user) {
        done({ type: 'email', message: 'No such user found' }, false);
        return;
      }
      if (bcrypt.compareSync(password, user.password)) {
        done(null, { id: user.id, email: user.email, userName: user.userName });
      } else {
        done({ type: 'password', message: 'Passwords did not match' }, false);
      }
    },
  ),
);

exports.getLoggedUser = async (ctx) => {
  if (ctx.isAuthenticated()) {
    const reqUserId = ctx.req.user.id;
    let user = null;
    await getAsync('usersMockDatabase').then((users) => {
      user = JSON.parse(users).find(currUser => currUser.id === reqUserId);
    });
    if (user) {
      delete user.password;
      ctx.response.body = user;
    } else {
      const statusCode = 500;
      ctx.throw(statusCode, "User doesn't exist");
    }
  } else {
    ctx.redirect('/');
  }
}; */